// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ping_reqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ping_req>
     _instance;
} _ping_req_default_instance_;
class pong_rspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<pong_rsp>
     _instance;
} _pong_rsp_default_instance_;

namespace protobuf_ping_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_req, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pong_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pong_rsp, pong_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ping_req)},
  { 6, -1, sizeof(pong_rsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ping_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_pong_rsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ping.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ping_req_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ping_req_default_instance_);_pong_rsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_pong_rsp_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nping.proto\"\030\n\010ping_req\022\014\n\004ping\030\001 \001(\t\"\030"
      "\n\010pong_rsp\022\014\n\004pong\030\002 \001(\t2,\n\014ping_service"
      "\022\034\n\004ping\022\t.ping_req\032\t.pong_rspB\003\200\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ping.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ping_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ping_req::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ping_req::ping_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ping_req)
}
ping_req::ping_req(const ping_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ping_req)
}

void ping_req::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ping_req::~ping_req() {
  // @@protoc_insertion_point(destructor:ping_req)
  SharedDtor();
}

void ping_req::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ping_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ping_req::descriptor() {
  protobuf_ping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ping_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ping_req& ping_req::default_instance() {
  protobuf_ping_2eproto::InitDefaults();
  return *internal_default_instance();
}

ping_req* ping_req::New(::google::protobuf::Arena* arena) const {
  ping_req* n = new ping_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ping_req::Clear() {
// @@protoc_insertion_point(message_clear_start:ping_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ping_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ping_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ping_req.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ping_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ping_req)
  return false;
#undef DO_
}

void ping_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ping_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ping_req.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ping_req)
}

::google::protobuf::uint8* ping_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ping_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ping_req.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ping_req)
  return target;
}

size_t ping_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ping_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ping_req)
  GOOGLE_DCHECK_NE(&from, this);
  const ping_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ping_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ping_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ping_req)
    MergeFrom(*source);
  }
}

void ping_req::MergeFrom(const ping_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ping_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void ping_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ping_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ping_req::CopyFrom(const ping_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ping_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping_req::IsInitialized() const {
  return true;
}

void ping_req::Swap(ping_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ping_req::InternalSwap(ping_req* other) {
  using std::swap;
  ping_.Swap(&other->ping_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ping_req::GetMetadata() const {
  protobuf_ping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ping_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ping_req

// string ping = 1;
void ping_req::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ping_req::ping() const {
  // @@protoc_insertion_point(field_get:ping_req.ping)
  return ping_.GetNoArena();
}
void ping_req::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ping_req.ping)
}
#if LANG_CXX11
void ping_req::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ping_req.ping)
}
#endif
void ping_req::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ping_req.ping)
}
void ping_req::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ping_req.ping)
}
::std::string* ping_req::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ping_req.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ping_req::release_ping() {
  // @@protoc_insertion_point(field_release:ping_req.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ping_req::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ping_req.ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pong_rsp::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pong_rsp::pong_rsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ping_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pong_rsp)
}
pong_rsp::pong_rsp(const pong_rsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:pong_rsp)
}

void pong_rsp::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

pong_rsp::~pong_rsp() {
  // @@protoc_insertion_point(destructor:pong_rsp)
  SharedDtor();
}

void pong_rsp::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pong_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pong_rsp::descriptor() {
  protobuf_ping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ping_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pong_rsp& pong_rsp::default_instance() {
  protobuf_ping_2eproto::InitDefaults();
  return *internal_default_instance();
}

pong_rsp* pong_rsp::New(::google::protobuf::Arena* arena) const {
  pong_rsp* n = new pong_rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pong_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pong_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool pong_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pong_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pong_rsp.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pong_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pong_rsp)
  return false;
#undef DO_
}

void pong_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pong_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pong_rsp.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pong_rsp)
}

::google::protobuf::uint8* pong_rsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pong_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pong_rsp.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pong_rsp)
  return target;
}

size_t pong_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pong_rsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 2;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pong_rsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pong_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  const pong_rsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pong_rsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pong_rsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pong_rsp)
    MergeFrom(*source);
  }
}

void pong_rsp::MergeFrom(const pong_rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pong_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void pong_rsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pong_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pong_rsp::CopyFrom(const pong_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pong_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pong_rsp::IsInitialized() const {
  return true;
}

void pong_rsp::Swap(pong_rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pong_rsp::InternalSwap(pong_rsp* other) {
  using std::swap;
  pong_.Swap(&other->pong_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pong_rsp::GetMetadata() const {
  protobuf_ping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ping_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pong_rsp

// string pong = 2;
void pong_rsp::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pong_rsp::pong() const {
  // @@protoc_insertion_point(field_get:pong_rsp.pong)
  return pong_.GetNoArena();
}
void pong_rsp::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pong_rsp.pong)
}
#if LANG_CXX11
void pong_rsp::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pong_rsp.pong)
}
#endif
void pong_rsp::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pong_rsp.pong)
}
void pong_rsp::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pong_rsp.pong)
}
::std::string* pong_rsp::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:pong_rsp.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pong_rsp::release_pong() {
  // @@protoc_insertion_point(field_release:pong_rsp.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pong_rsp::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:pong_rsp.pong)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ping_service::~ping_service() {}

const ::google::protobuf::ServiceDescriptor* ping_service::descriptor() {
  protobuf_ping_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ping_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ping_service::GetDescriptor() {
  return descriptor();
}

void ping_service::ping(::google::protobuf::RpcController* controller,
                         const ::ping_req*,
                         ::pong_rsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ping() not implemented.");
  done->Run();
}

void ping_service::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_ping_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ping(controller,
             ::google::protobuf::down_cast<const ::ping_req*>(request),
             ::google::protobuf::down_cast< ::pong_rsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ping_service::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ping_req::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ping_service::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::pong_rsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ping_service_Stub::ping_service_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ping_service_Stub::ping_service_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ping_service_Stub::~ping_service_Stub() {
  if (owns_channel_) delete channel_;
}

void ping_service_Stub::ping(::google::protobuf::RpcController* controller,
                              const ::ping_req* request,
                              ::pong_rsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
