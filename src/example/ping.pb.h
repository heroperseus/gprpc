// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ping.proto

#ifndef PROTOBUF_ping_2eproto__INCLUDED
#define PROTOBUF_ping_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ping_req;
class ping_reqDefaultTypeInternal;
extern ping_reqDefaultTypeInternal _ping_req_default_instance_;
class pong_rsp;
class pong_rspDefaultTypeInternal;
extern pong_rspDefaultTypeInternal _pong_rsp_default_instance_;

namespace protobuf_ping_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ping_2eproto

// ===================================================================

class ping_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ping_req) */ {
 public:
  ping_req();
  virtual ~ping_req();

  ping_req(const ping_req& from);

  inline ping_req& operator=(const ping_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ping_req(ping_req&& from) noexcept
    : ping_req() {
    *this = ::std::move(from);
  }

  inline ping_req& operator=(ping_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ping_req& default_instance();

  static inline const ping_req* internal_default_instance() {
    return reinterpret_cast<const ping_req*>(
               &_ping_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ping_req* other);
  friend void swap(ping_req& a, ping_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ping_req* New() const PROTOBUF_FINAL { return New(NULL); }

  ping_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ping_req& from);
  void MergeFrom(const ping_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ping_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ping_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable int _cached_size_;
  friend struct protobuf_ping_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pong_rsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pong_rsp) */ {
 public:
  pong_rsp();
  virtual ~pong_rsp();

  pong_rsp(const pong_rsp& from);

  inline pong_rsp& operator=(const pong_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pong_rsp(pong_rsp&& from) noexcept
    : pong_rsp() {
    *this = ::std::move(from);
  }

  inline pong_rsp& operator=(pong_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pong_rsp& default_instance();

  static inline const pong_rsp* internal_default_instance() {
    return reinterpret_cast<const pong_rsp*>(
               &_pong_rsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(pong_rsp* other);
  friend void swap(pong_rsp& a, pong_rsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pong_rsp* New() const PROTOBUF_FINAL { return New(NULL); }

  pong_rsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const pong_rsp& from);
  void MergeFrom(const pong_rsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(pong_rsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 2;
  void clear_pong();
  static const int kPongFieldNumber = 2;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:pong_rsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable int _cached_size_;
  friend struct protobuf_ping_2eproto::TableStruct;
};
// ===================================================================

class ping_service_Stub;

class ping_service : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ping_service() {};
 public:
  virtual ~ping_service();

  typedef ping_service_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ping(::google::protobuf::RpcController* controller,
                       const ::ping_req* request,
                       ::pong_rsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ping_service);
};

class ping_service_Stub : public ping_service {
 public:
  ping_service_Stub(::google::protobuf::RpcChannel* channel);
  ping_service_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ping_service_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ping_service ------------------------------------------

  void ping(::google::protobuf::RpcController* controller,
                       const ::ping_req* request,
                       ::pong_rsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ping_service_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ping_req

// string ping = 1;
inline void ping_req::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ping_req::ping() const {
  // @@protoc_insertion_point(field_get:ping_req.ping)
  return ping_.GetNoArena();
}
inline void ping_req::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ping_req.ping)
}
#if LANG_CXX11
inline void ping_req::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ping_req.ping)
}
#endif
inline void ping_req::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ping_req.ping)
}
inline void ping_req::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ping_req.ping)
}
inline ::std::string* ping_req::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ping_req.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ping_req::release_ping() {
  // @@protoc_insertion_point(field_release:ping_req.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ping_req::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ping_req.ping)
}

// -------------------------------------------------------------------

// pong_rsp

// string pong = 2;
inline void pong_rsp::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pong_rsp::pong() const {
  // @@protoc_insertion_point(field_get:pong_rsp.pong)
  return pong_.GetNoArena();
}
inline void pong_rsp::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pong_rsp.pong)
}
#if LANG_CXX11
inline void pong_rsp::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pong_rsp.pong)
}
#endif
inline void pong_rsp::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pong_rsp.pong)
}
inline void pong_rsp::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pong_rsp.pong)
}
inline ::std::string* pong_rsp::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:pong_rsp.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pong_rsp::release_pong() {
  // @@protoc_insertion_point(field_release:pong_rsp.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pong_rsp::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:pong_rsp.pong)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ping_2eproto__INCLUDED
